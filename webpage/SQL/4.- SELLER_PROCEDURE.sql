CREATE OR REPLACE PROCEDURE VENDEDOR_CREATE(
	RUT_PIC IN VENDEDOR.RUT_VENDEDOR%TYPE,
	NOMBRE_PIC IN VENDEDOR.NOMBRE%TYPE,
	EMAIL_PIC IN VENDEDOR.EMAIL%TYPE,
	CONTRASEÑA_PIC IN VENDEDOR.CONTRASEÑA%TYPE
)

IS 
	LARGO_RUT EXCEPTION;
	RUT_INVALIDO EXCEPTION;
	CONTRASEÑA_INVALIDA EXCEPTION;
	Variable_ingreso VARCHAR2(100);
	CONTADOR_1 NUMBER;
	CONTADOR_2 NUMBER;
	CONTADOR_3 NUMBER;

	
BEGIN 
	LOCK TABLE VENDEDOR IN ROW EXCLUSIVE MODE;
    
    IF NOT(RUT_PIC LIKE '%-_' OR RUT_PIC LIKE '%.%') THEN
        IF LENGTH(RUT_PIC) = 8 OR LENGTH(RUT_PIC) = 9 THEN
            CONTADOR_1 := 0;
            CONTADOR_2 := 0;
			CONTADOR_3 := 0;
            FOR I IN 1 .. LENGTH(CONTRASEÑA_PIC) LOOP
                Variable_ingreso := SUBSTR(CONTRASEÑA_PIC, I,1);
                FOR J IN ASCII('A') .. ASCII('Z') LOOP
                    IF ASCII(Variable_ingreso) = J THEN
                        CONTADOR_1 := CONTADOR_1 + 1; 
                    END IF;
                END LOOP;
                
                FOR J IN ASCII('a') .. ASCII('z') LOOP
                    IF ASCII(Variable_ingreso) = J THEN 
                        CONTADOR_2 := CONTADOR_2 + 1;
                    END IF;
                END LOOP;
            
                FOR J IN ASCII(0) .. ASCII(9) LOOP
                    IF ASCII(Variable_ingreso) = J THEN 
                        CONTADOR_3 := CONTADOR_3 + 1;
                    END IF;
                END LOOP;	
            END LOOP;
            IF CONTADOR_1 >= 1 AND CONTADOR_2 >= 1 AND CONTADOR_3 >= 1 THEN
                INSERT INTO VENDEDOR VALUES(RUT_PIC, NOMBRE_PIC, EMAIL_PIC, CONTRASEÑA_PIC);
                DBMS_OUTPUT.PUT_LINE('Vendedor ingresado con éxito');
                COMMIT;
            ELSE 
                RAISE CONTRASEÑA_INVALIDA;
            END IF;
        ELSE
            RAISE LARGO_RUT;
        END IF;   
    ELSE
        RAISE RUT_INVALIDO;
    END IF;
        

	EXCEPTION
		WHEN RUT_INVALIDO THEN 
			DBMS_OUTPUT.PUT_LINE('El rut ingresado no debe tener ni guion ni puntos');
			ROLLBACK;
		WHEN LARGO_RUT THEN
			DBMS_OUTPUT.PUT_LINE('El rut es incorrecto');
			ROLLBACK;
		WHEN CONTRASEÑA_INVALIDA THEN
			DBMS_OUTPUT.PUT_LINE('Contraseña invalida');
		WHEN DUP_VAL_ON_INDEX THEN
			DBMS_OUTPUT.PUT_LINE('El vendedor está registrado');
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('Error no capturado');
			ROLLBACK;
END;


CREATE OR REPLACE TRIGGER ESTANDARIZAR_DATOS_VENDEDOR
BEFORE INSERT ON VENDEDOR
FOR EACH ROW 
DECLARE
BEGIN
	:NEW.NOMBRE := UPPER(:NEW.NOMBRE);
END;


CREATE OR REPLACE TRIGGER CONTRASEÑA_INVALIDA
BEFORE UPDATE 
ON VENDEDOR
FOR EACH ROW
DECLARE 
    INVALID_PASS EXCEPTION;
	variable_pass VARCHAR2(100);
	CONTADOR_1 NUMBER;
	CONTADOR_2 NUMBER;
	CONTADOR_3 NUMBER;
BEGIN 
	CONTADOR_1 := 0;
	CONTADOR_2 := 0;
	CONTADOR_3 := 0;

	FOR I IN 1 .. LENGTH(:NEW.CONTRASEÑA) LOOP
		variable_pass := SUBSTR(:NEW.CONTRASEÑA, I,1);
		FOR J IN ASCII('A') .. ASCII('Z') LOOP
			IF ASCII(variable_pass) = J THEN
				CONTADOR_1 := CONTADOR_1 + 1; 
			END IF;
		END LOOP;
		
		FOR J IN ASCII('a') .. ASCII('z') LOOP
			IF ASCII(variable_pass) = J THEN 
				CONTADOR_2 := CONTADOR_2 + 1;
			END IF;
		END LOOP;
	
		FOR J IN ASCII(0) .. ASCII(9) LOOP
			IF ASCII(variable_pass) = J THEN 
				CONTADOR_3 := CONTADOR_3 + 1;
			END IF;
		END LOOP;	
	END LOOP;
    
    IF NOT(CONTADOR_1 >= 1 AND CONTADOR_2 >= 1 AND CONTADOR_3 >= 1) THEN
        raise_application_error (-20001,'CONTRASEÑA INVALIDA, MALA TUYA');
    END IF;

END;


CREATE OR REPLACE PROCEDURE VENDEDOR_DELETE(
	RUT_PEC IN VENDEDOR.RUT_VENDEDOR%TYPE
)
IS	
	CONTADOR NUMBER;
	RUT_AUX VARCHAR2(100);
	EXISTENCIA EXCEPTION;
	VENDEDOR_EXISTENTE NUMBER;
BEGIN
	RUT_AUX := UPPER(RUT_PEC);
	SELECT COUNT(*) INTO VENDEDOR_EXISTENTE FROM VENDEDOR C WHERE RUT_AUX = C.RUT_VENDEDOR;
	SELECT COUNT(*) INTO CONTADOR FROM REGISTRO_VENTAS WHERE RUT_VENDEDOR = RUT_AUX;
	IF VENDEDOR_EXISTENTE = 1 THEN

		DELETE FROM REGISTRO_VENTAS WHERE RUT_VENDEDOR = RUT_AUX;
		DELETE FROM VENDEDOR WHERE RUT_VENDEDOR = RUT_AUX;
		
		DBMS_OUTPUT.PUT_LINE('Vendedor eliminado correctamente.');		
	ELSE
		RAISE EXISTENCIA;
	END IF;
	
	EXCEPTION
		WHEN EXISTENCIA THEN
			DBMS_OUTPUT.PUT_LINE('El rut ingresado no está alojado en la base de datos.');
END;


CREATE OR REPLACE PROCEDURE VENDEDOR_UPDATE(
	RUT_PAC IN VENDEDOR.RUT_VENDEDOR%TYPE, 
	CORREO_PADC IN VENDEDOR.EMAIL%TYPE,
	CONTRASEÑA_PADC IN VENDEDOR.CONTRASEÑA%TYPE
)
IS	
	RUT_AUX VARCHAR2(100);
BEGIN 
	UPDATE VENDEDOR SET EMAIL = UPPER(CORREO_PADC) WHERE RUT_VENDEDOR = RUT_PAC;
	UPDATE VENDEDOR SET CONTRASEÑA = CONTRASEÑA_PADC WHERE RUT_VENDEDOR = RUT_PAC;
END;



SELECT * FROM VENDEDOR;

CALL VENDEDOR_CREATE('66666676', 'THADLY GUERRA', 'thaEWRER64@gmail.com',  'asWQE1233');
CALL VENDEDOR_CREATE('199027952', 'MARIO GONZALEZ', 'tWEWWly64@gmail.com',  'asWQE1D3');
CALL VENDEDOR_CREATE('199027988', 'PABLO WINZIP', 'thadXX64@gmail.com',  'asasF123tasdfqx');
CALL VENDEDOR_CREATE('197813261', 'claudio teno', 'asdw@gmail.com',  'MundoHola1235');

CALL VENDEDOR_DELETE('66666676');
CALL VENDEDOR_DELETE('197813261');
CALL VENDEDOR_DELETE('1233261');

CALL VENDEDOR_UPDATE('66666676', 'EMAIL_NUEVO2', 'aa');


DELETE FROM VENDEDOR;
DELETE FROM VENDEDOR WHERE NOMBRE = 'THADLY GUERRA';

insert into VENDEDOR(RUT_VENDEDOR, NOMBRE, EMAIL, CONTRASEÑA)
VALUES ('987654312', 'claudio teno', 'asdw@gmail.com',  'ab')
